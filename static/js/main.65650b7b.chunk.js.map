{"version":3,"sources":["components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["List","props","onFavBtnClick","x","addFavorites","setState","showFavorites","formValidation","state","nameFromInput","heightFromInput","birthyearFromInput","genderFromInput","eyecolorFromInput","onKeyboardClick","event","search","target","value","favoriteList","handleChange","name","addNewCharacter","prevState","height","birth_year","gender","eye_color","filterPerson","person","toUpperCase","indexOf","peopleList","this","dataFromApi","axios","get","baseUrl","then","response","data","results","className","filter","map","id","key","onClick","placeholder","type","onChange","disabled","React","Component","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65650b7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\n class List extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            peopleList: [],\r\n            search: \"\",\r\n            favoriteList: [],\r\n            showFavorites: false,\r\n            nameFromInput: \"\",\r\n            heightFromInput: \"\",\r\n            birthyearFromInput: \"\",\r\n            genderFromInput: \"\",\r\n            eyecolorFromInput: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.dataFromApi();\r\n    }\r\n\r\n    dataFromApi() {\r\n        const baseUrl = 'https://swapi.dev/api/'\r\n        \r\n        axios.get(baseUrl + 'people')\r\n        .then(response => {\r\n            const peopleList = response.data.results\r\n            this.setState({ peopleList: peopleList})\r\n        })\r\n    }\r\n\r\n    onFavBtnClick = x => {\r\n        this.addFavorites(x);\r\n        this.setState({showFavorites: true})\r\n    }\r\n\r\n    formValidation = () => {\r\n        let asd = !this.state.nameFromInput\r\n            && !this.state.heightFromInput\r\n            && !this.state.birthyearFromInput\r\n            && !this.state.genderFromInput\r\n            && !this.state.eyecolorFromInput;\r\n        return asd;\r\n    }\r\n\r\n    onKeyboardClick = event => {\r\n        this.setState({ search: event.target.value}); \r\n    }\r\n\r\n    addFavorites = x => {\r\n        let favoriteList = [...this.state.favoriteList, x]\r\n        this.setState({ favoriteList })\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n    addNewCharacter = () => {\r\n        this.setState( prevState => ({\r\n            favoriteList: [...prevState.favoriteList, {\r\n                name: this.state.nameFromInput,\r\n                height: this.state.heightFromInput,\r\n                birth_year: this.state.birthyearFromInput,\r\n                gender: this.state.genderFromInput,\r\n                eye_color: this.state.eyecolorFromInput}]\r\n        }))\r\n        this.setState({showFavorites: true})\r\n    }\r\n\r\n    filterPerson = person => {\r\n        let personInfo = person.name.toUpperCase().indexOf(this.state.search.toUpperCase()) > -1\r\n            || person.height.indexOf(this.state.search) > -1\r\n            || person.gender.toUpperCase().indexOf(this.state.search.toUpperCase()) > -1\r\n            || person.eye_color.toUpperCase().indexOf(this.state.search.toUpperCase()) > -1 \r\n            || person.birth_year.toUpperCase().indexOf(this.state.search.toUpperCase()) > -1;\r\n        return personInfo;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <main>\r\n                <div className=\"resultbox\">\r\n                    <ul>\r\n                        {this.state.peopleList.filter(this.filterPerson).map((person, id) => (\r\n                            <li key={id}>\r\n                                <button className=\"fav\" onClick={ () => this.onFavBtnClick(person)}>Fav</button>\r\n                                {`(${person.gender}) ${person.name} is ${person.height} cm tall, got ${person.eye_color} eyes and is born ${person.birth_year}`}\r\n                            </li>\r\n                        ))}\r\n                        \r\n                        {this.state.showFavorites && <h3 className=\"favoriteHeader\">Favorites</h3>}\r\n                        {this.state.favoriteList.filter(this.filterPerson).map((person, id) => (\r\n                            <li key={id} className=\"favList\">\r\n                                {`(${person.gender}) ${person.name} is ${person.height} cm tall, got ${person.eye_color} eyes and is born ${person.birth_year}`}\r\n                            </li>\r\n                            ))}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"Form\">\r\n                    <input className=\"search\" placeholder=\"Search the universe!\" type=\"text\" value={this.state.search} onChange={this.onKeyboardClick}></input>\r\n                    <h3>Make you own character!</h3>\r\n                    <input className=\"search special\" placeholder=\"Name...\" name=\"nameFromInput\" onChange={this.handleChange}></input>\r\n                    <input className=\"search\" placeholder=\"Gender...\" name=\"genderFromInput\" onChange={this.handleChange}></input>\r\n                    <input className=\"search\" placeholder=\"Birthyear...\" name=\"birthyearFromInput\" onChange={this.handleChange}></input>\r\n                    <input className=\"search\" placeholder=\"Height...\" name=\"heightFromInput\" onChange={this.handleChange}></input>\r\n                    <input className=\"search\" placeholder=\"Eyecolor...\" name=\"eyecolorFromInput\" onChange={this.handleChange}></input>\r\n                    <button className=\"findBtn\" onClick={this.addNewCharacter} disabled={this.formValidation()}>Add character</button>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React from 'react';\nimport './App.css';\n\nimport Main from './components/Main'\n\n\nconst App = () => (\n    <main>\n      <div className=\"resultContainer\">\n        <h2>Star Wars</h2>\n            <Main />\n      </div>\n    </main>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}